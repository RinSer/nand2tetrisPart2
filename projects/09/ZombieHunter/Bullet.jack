/** Part of Zombie Hunter game in Jack language
  * Author: RinSer
  */
/** Implements all Bullets as recursive list */
class Bullet {

   field int location; // screen location of the Player's top-left corner
   field int direction;
   field boolean isOver; // flag
   field Bullet previous;

   /** Constructs a new Bullet at a given memory location with set direction */
   constructor Bullet new(int loc, int direct, Bullet pre) {
      let isOver = false;
      let location = loc;
      let direction = direct;
      let previous = pre;
      do draw();
      return this;
   }

   /** gets previous bullet */
   method Bullet getPrevious() {
      return previous;
   }

   /** gets bullet direction */
   method int getDirection() {
      return direction;
   }

   /** gets bullet location */
   method int getLocation() {
      return location;
   }

   /** if zombie is hit */
   method boolean aimed(int target) {
      var int diff;
      let diff = target - location;
      if (diff = 0) {
         return true;
      }
      // horizontal align
      if ((((diff / 32) * 32) = diff) & ((diff > -257) & (diff < 257))) {
         return true;
      }
      return false;
   }

   /** Disposes this Player */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** if bullet has finished fly */
   method boolean isOver() {
      return isOver;
   }

   /** set bullet finished */
   method void setOver() {
      let isOver = true;
      do erase();
      return;
   }

   method void moveTo() {
      if (direction = 1) { do moveUp(); }
      if (direction = 2) { do moveDown(); }
      if (direction = 3) { do moveLeft(); }
      if (direction = 4) { do moveRight(); }
      return;
   }

   method void moveUp() {
      if (location > 256) {
         do erase();
         let location = location - 256;
         do draw();
      } else {
         do erase();
         let isOver = true;
      }
      return;
   }

   method void moveDown() {
      if (location < 7440) {
         do erase();
         let location = location + 256;
         do draw();
      } else {
         do erase();
         let isOver = true;
      }
      return;
   }

   method void moveLeft() {
      if (~(((location / 32) * 32) = location)) {
         do erase();
         let location = location - 1;
         do draw();
      } else {
         do erase();
         let isOver = true;
      }
      return;
   }

   method void moveRight() {
      if (~((((location + 1) / 32) * 32) = (location + 1))) {
         do erase();
         let location = location + 1;
         do draw();
      } else {
         do erase();
         let isOver = true;
      }
      return;
   }

   method void draw() {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+224, 384);
      do Memory.poke(memAddress+256, 384);
      return;
   }

   method void erase() {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      return;
   }
}
