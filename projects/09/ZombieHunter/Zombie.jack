/** Implements a Zombie */
class Zombie {

   field int location; // screen location of the zombie's top-left corner

   /** Constructs a new zombie at a given location (top-left corner) */
   constructor Zombie new(int x, int y) {
      do setLocation(x, y);
      return this;
   }

   method int getLocation() {
      return location;
   }

   /** Disposes this zombie */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void setLocation(int x, int y) {
      if (x < 32 & x > -1 & y < 16 & y > -1) {
         let location = 16*x + 32*y;
         do erase();
         do draw();
      }      
      return;
   }

   method void moveUp() {
      if (location > 0) {
         do erase();
         let location = location - 32;
         do draw();
      }
      return;
   }

   method void moveDown() {
      if (location < 7680) {
         do erase();
         let location = location + 32;
         do draw();
      }
      return;
   }

   method void moveLeft() {
      if (~(((location / 32) * 32) = location)) {
         do erase();
         let location = location - 1;
         do draw();
      }
      return;
   }

   method void moveRight() {
      if (~((((location + 1) / 32) * 32) = (location + 1))) {
         do erase();
         let location = location + 1;
         do draw();
      }
      return;
   }

   method void draw() {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 384);
      do Memory.poke(memAddress+32, -32191);
      do Memory.poke(memAddress+64, 24966);
      do Memory.poke(memAddress+96, -26471);
      do Memory.poke(memAddress+128, 1888);
      do Memory.poke(memAddress+160, 704);
      do Memory.poke(memAddress+192, 832);
      do Memory.poke(memAddress+224, 704);
      do Memory.poke(memAddress+256, 384);
      do Memory.poke(memAddress+288, 576);
      do Memory.poke(memAddress+320, 1632);
      do Memory.poke(memAddress+352, 1056);
      do Memory.poke(memAddress+384, 576);
      do Memory.poke(memAddress+416, 1056);
      do Memory.poke(memAddress+448, 2640);
      do Memory.poke(memAddress+480, 3696);
      return;
   }

   method void erase() {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }
}
