/**
 * Zombie hunter game in Jack language.
 * Simple 8 bit game. You are a survived hunter 
 * and each time you move with arrow buttons
 * zombies start chasing you. You can shoot them
 * with a rifle by pushing space button. Player 
 * always shoots in the last direction where he moved,
 * but you cannot shoot multiple times in the same 
 * direction as you need to reload your rifle by moving
 * first to any other direction and then back to the
 * desired for shot. Each time you kill a zombie the 
 * next to come becomes more fast and fierce.
 * Try to survive as long as possible!
 * Authored by RinSer
 */

class ZombieGame {
   field int zNumber;
   field Player player;
   field Bullet bullet;
   field Array zombies;
   field int direction;
   field int bulletDirection;
   field boolean isShooting;
   field boolean exit;
   field int killed;

   /** Constructs a new Zombie Game. */
   constructor ZombieGame new() {
      let isShooting = false;
      let killed = 50;
      let zNumber = 2;
      let player = Player.new(15, 122);
      let zombies = Array.new(zNumber);
      do player.erase();
      do player.draw();
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do player.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the player in the current direction. */
   method void movePlayer() {
      if (direction = 1) { do player.moveUp(); }
      if (direction = 2) { do player.moveDown(); }
      if (direction = 3) { do player.moveLeft(); }
      if (direction = 4) { do player.moveRight(); }
      do Sys.wait(5);
      return;
   }

   /** creates zombie in position specified by array index */
   method Zombie zombieByIndex(int index) {
      if (index = 0) {
         return Zombie.new(0, 0);
      }
      if (index = 2) {
         return Zombie.new(30, 0);
      }
      if (index = 1) {
         return Zombie.new(30, 240);
      }
      if (index = 3) {
         return Zombie.new(0, 240);
      }
      return null;
   }

   /** implements each shot */
   method void shoot() {
      var int location;
      let location = player.getLocation();
      if (isShooting) {
         if (bullet = null) {
            let bullet = Bullet.new(location, direction, null);
         }
         if ((~(bullet = null)) & (~(direction = bullet.getDirection()))) {
            let bullet = Bullet.new(location, direction, bullet);
         }
      } else {
         let bullet = Bullet.new(location, direction, null);
         let isShooting = true;
      }
      return;
   }

   /** bullets fly */
   method void processShooting() {
      var boolean stop;
      var Bullet current;
      var Bullet dead;
      var Zombie cZombie;
      var int idx;
      // shooting
      if (isShooting) {
         let current = bullet;
         if (current = null) {
            let isShooting = false;
         } else {
            if (current.isOver()) {
               let bullet = current.getPrevious();
               do current.dispose();
            } else {
               while (~(current = null)) {
                  let stop = current.isOver();
                  if (stop) {
                     let dead = current;
                     let current = current.getPrevious();
                  } else {
                     do current.moveTo();
                     let idx = 0;
                     while (idx < zNumber) {
                        let cZombie = zombies[idx];
                        if (~(cZombie = null)) {
                           if (current.aimed(cZombie.getLocation())) {
                              do killZombie(cZombie, idx);
                              do current.setOver();
                              if (killed > 0) {
                                 let killed = killed - 1;
                              }
                           }
                        }
                        let idx = idx + 1;
                     }
                     let current = current.getPrevious();
                  }
               }    
            }
         }
      }
      return;
   }

   /** if zombie is shot */
   method void killZombie(Zombie zombie, int idx) {
      do zombie.erase();
      do zombie.dispose();
      let zombies[idx] = null;
      return;
   }

   /** let zombies move to the player */
   method void moveZombies() {
      var int idx;
      var Zombie current;
      let idx = 0;
      while (idx < zNumber) {
         if (~(zombies[idx] = null)) {
            let current = zombies[idx];
            do current.moveTo(player.getLocation());
            if (current.isSuccess()) {
               do Output.printString("You got caught! Game over.");
               let exit = true;
            }
            do Sys.wait(killed);
         }
         let idx = 1 + idx;
      }
      return;
   }

   /** creates zombies */
   method void addZombie() {
      var int idx;
      let idx = 0;
      while (idx < zNumber) {
         if (zombies[idx] = null) {
            let zombies[idx] = zombieByIndex(idx);
         }
         let idx = 1 + idx;
      }
      return;
   }

   /** Runs the game: handles the user's inputs and moves the zombie accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (~exit & (key = 0)) {
            let key = Keyboard.keyPressed();
            do player.draw();
            do processShooting();
            do moveZombies();
         }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow
         if (key = 32) { do shoot(); } // space

         do addZombie();
         // waits for the key to be released
         while (~exit & ~(key = 0)) {
            let key = Keyboard.keyPressed();
            if ((key > 129) & (key < 134)) {
               do movePlayer();
            }
            do processShooting();
            do moveZombies();
         }
     } // while
     return;
   }
}



