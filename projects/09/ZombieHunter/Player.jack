/** Implements a Player */
class Player {

   field int location; // screen location of the Player's top-left corner

   /** Constructs a new Player at a given location (top-left corner) */
   constructor Player new(int x, int y) {
      do setLocation(x, y);
      return this;
   }

   method int getLocation() {
      return location;
   }

   /** Disposes this Player */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void setLocation(int x, int y) {
      if (x < 32 & x > -1 & y < 240 & y > -1) {
         let location = x + (32*y);
         do erase();
         do draw();
      }      
      return;
   }

   method void moveUp() {
      if (location > 128) {
         do erase();
         let location = location - 128;
         do draw();
      }
      return;
   }

   method void moveDown() {
      if (location < 7568) { // 7680
         do erase();
         let location = location + 128;
         do draw();
      }
      return;
   }

   method void moveLeft() {
      if (~(((location / 32) * 32) = location)) {
         do erase();
         let location = location - 1;
         do draw();
      }
      return;
   }

   method void moveRight() {
      if (~((((location + 1) / 32) * 32) = (location + 1))) {
         do erase();
         let location = location + 1;
         do draw();
      }
      return;
   }

   method void draw() {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 960);
      do Memory.poke(memAddress+32, 640);
      do Memory.poke(memAddress+64, 962);
      do Memory.poke(memAddress+96, 396);
      do Memory.poke(memAddress+128, 3704);
      do Memory.poke(memAddress+160, 3056);
      do Memory.poke(memAddress+192, 3056);
      do Memory.poke(memAddress+224, 4032);
      do Memory.poke(memAddress+256, 7552);
      do Memory.poke(memAddress+288, 32736);
      do Memory.poke(memAddress+320, 30304);
      do Memory.poke(memAddress+352, 26208);
      do Memory.poke(memAddress+384, 1632);
      do Memory.poke(memAddress+416, 1632);
      do Memory.poke(memAddress+448, 1632);
      do Memory.poke(memAddress+480, 1904);
      return;
   }

   method void erase() {
      var int memAddress;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }
}
