<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier kind=var type=Array idx=0 isDeclared=True> a </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier kind=var type=int idx=1 isDeclared=True> length </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier kind=var type=int idx=2 isDeclared=True> i </identifier>
        <symbol> , </symbol>
        <identifier kind=var type=int idx=3 isDeclared=True> sum </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind=var type=int idx=1> length </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Keyboard </identifier>
              <symbol> . </symbol>
              <identifier> readInt </identifier>
              <symbol> ( </symbol>
            <expressionList>
              <expression>
                <term>
                  <stringConstant> HOW MANY NUMBERS?  </stringConstant>
                </term>
              </expression>
            </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind=var type=Array idx=0> a </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Array </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
            <expressionList>
              <expression>
                <term>
                  <identifier kind=var type=int idx=1> length </identifier>
                </term>
              </expression>
            </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind=var type=int idx=2> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
            <keyword> while </keyword>
            <symbol> ( </symbol>
          <expression>
            <term>
              <identifier kind=var type=int idx=2> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier kind=var type=int idx=1> length </identifier>
            </term>
          </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <letStatement>
                <keyword> let </keyword>
                <identifier kind=var type=Array idx=0> a </identifier>
                <symbol> [ </symbol>
                <expression>
                  <term>
                    <identifier kind=var type=int idx=2> i </identifier>
                  </term>
                </expression>
                <symbol> ] </symbol>
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier> Keyboard </identifier>
                    <symbol> . </symbol>
                    <identifier> readInt </identifier>
                    <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>
                      </term>
                    </expression>
                  </expressionList>
                    <symbol> ) </symbol>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <letStatement>
                <keyword> let </keyword>
                <identifier kind=var type=int idx=2> i </identifier>
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier kind=var type=int idx=2> i </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
            </statements>
            <symbol> } </symbol>
        </whileStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind=var type=int idx=2> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind=var type=int idx=3> sum </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
            <keyword> while </keyword>
            <symbol> ( </symbol>
          <expression>
            <term>
              <identifier kind=var type=int idx=2> i </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <identifier kind=var type=int idx=1> length </identifier>
            </term>
          </expression>
            <symbol> ) </symbol>
            <symbol> { </symbol>
            <statements>
              <letStatement>
                <keyword> let </keyword>
                <identifier kind=var type=int idx=3> sum </identifier>
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier kind=var type=int idx=3> sum </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier kind=var type=Array idx=0> a </identifier>
                    <symbol> [ </symbol>
                    <expression>
                      <term>
                        <identifier kind=var type=int idx=2> i </identifier>
                      </term>
                    </expression>
                    <symbol> ] </symbol>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
              <letStatement>
                <keyword> let </keyword>
                <identifier kind=var type=int idx=2> i </identifier>
                <symbol> = </symbol>
                <expression>
                  <term>
                    <identifier kind=var type=int idx=2> i </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> ; </symbol>
              </letStatement>
            </statements>
            <symbol> } </symbol>
        </whileStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <symbol> ( </symbol>
        <expressionList>
          <expression>
            <term>
              <stringConstant> THE AVERAGE IS:  </stringConstant>
            </term>
          </expression>
        </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printInt </identifier>
          <symbol> ( </symbol>
        <expressionList>
          <expression>
            <term>
              <identifier kind=var type=int idx=3> sum </identifier>
            </term>
            <symbol> / </symbol>
            <term>
              <identifier kind=var type=int idx=1> length </identifier>
            </term>
          </expression>
        </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> println </identifier>
          <symbol> ( </symbol>
        <expressionList>
        </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
            <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
