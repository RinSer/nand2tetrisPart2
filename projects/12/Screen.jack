
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int start, end, max;
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int value, idx;
        let value = 2;
        let idx = 1;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        while (idx < 16) {
            let twoToThe[idx] = value;
            let value = value + value;
            let idx = idx + 1;
        }
        let color = true;
        let start = 16384;
        let end = 32767;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int idx;
        let idx = start;
        while (idx < end + 1)
        {
            do Memory.poke(idx, false);
            let idx = idx + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit;
        if (x < 512 & y < 256)
        {
            let address = (32 * y) + (x / 16);
            let value = Memory.peek(start + address);
            let bit = x - (16 * (x / 16));
            if (color)
            {
                let value = value | twoToThe[bit];
            }
            else
            {
                if (bit = 15)
                {
                    let value = value & end;
                }
                else
                {
                    let value = value & (-(twoToThe[bit] + 1));
                }
            }
            do Memory.poke(start + address, value);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx;
        if ((x1 = x2) & (y1 = y2)) // dot
        {
            do Screen.drawPixel(x1, y1);
            return;
        }

        if (x1 = x2) // vertical line
        {
            if (y1 > y2)
            {
                let dy = y1;
                let y1 = y2;
                let y2 = dy;
            }
            while (y1 < (y2 + 1))
            {
                do Screen.drawPixel(x1, y1);
                let y1 = y1 + 1;
            }
            return;
        }

        if (y1 = y2) // horizontal line
        {
            if (x1 > x2)
            {
                let dx = x1;
                let x1 = x2;
                let x2 = dx;
            }
            while (x1 < (x2 + 1))
            {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 + 1;
            }
            return;
        }

        let dx = x2 - x1;
        if (dx < 0)
        {
            let dx = -dx;
        }
        let dy = y2 - y1;
        if (dy < 0)
        {
            let dy = -dy;
        }
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        while ((a < (dx + 1)) & (b < (dy + 1)))
        {
            if ((x1 < x2) & (y1 < y2))
            {
                do Screen.drawPixel(x1 + a, y1 + b);
            }
            if ((x1 > x2) & (y1 < y2))
            {
                do Screen.drawPixel(x1 - a, y1 + b);
            }
            if ((x1 < x2) & (y1 > y2))
            {
                do Screen.drawPixel(x1 + a, y1 - b);
            }
            if ((x1 > x2) & (y1 > y2))
            {
                do Screen.drawPixel(x1 - a, y1 - b);
            }
            if (adyMinusbdx < 0)
            {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            else
            {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 = (y2 + 1)))
        {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        let dy = -r;
        while (dy < r)
        {
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
