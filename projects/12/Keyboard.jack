// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static int KEYBOARD;

    /** Initializes the keyboard. */
    function void init() {
        let KEYBOARD = 24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(KEYBOARD);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char code;
        while (Keyboard.keyPressed() = 0)
        {

        }
        let code = Keyboard.keyPressed();
        while (~(Keyboard.keyPressed() = 0))
        {

        }
        do Output.printChar(code);
        return code;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String str;
        var char code;
        do Output.printString(message);
        let str = String.new(1000);
        while (true)
        {
            let code = Keyboard.readChar();
            if (code = 128)
            {
                do Output.println();
                return str;
            }
            else
            {
                if (code = 129)
                {
                    do str.eraseLastChar();
                    do Output.backSpace();
                }
                else
                {
                    do str.appendChar(code);
                }
            }
        }
        return str;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var int str;
        var boolean neg;
        var char code;
        do Output.printString(message);
        let str = 0;
        let neg = false;
        while (true)
        {
            let code = Keyboard.readChar();
            if (code = 128)
            {
                do Output.println();
                if (neg)
                {
                    return -str;
                }
                return str;
            }
            else
            {
                if (code = 129)
                {
                    let str = str / 10;
                    if (neg & (str = 0))
                    {
                        let neg = false;
                    }
                    do Output.backSpace();
                }
                else
                {
                    if ((code > 47) & (code < 58))
                    {
                        let str = (str * 10) + (code - 48);
                    }
                    else
                    {
                        if ((str = 0) & (code = 45))
                        {
                            let neg = true;
                        }
                        else
                        {
                            do Output.println();
                            if (neg)
                            {
                                return -str;
                            }
                            return str;
                        }
                    }
                }
            }
        }
        return str;
    }
}
